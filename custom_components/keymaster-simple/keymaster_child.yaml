# yamllint disable
####################  input_text:  ###############
input_text:
  LOCKNAME_name_TEMPLATENUM:
    name: "Name"
  LOCKNAME_pin_TEMPLATENUM:
    name: "PIN"
    mode: HIDE_PINS

#################  input_boolean: ################
input_boolean:
  notify_LOCKNAME_TEMPLATENUM:
    name: "Notifications"
  enabled_LOCKNAME_TEMPLATENUM:
    name: "Enabled"
  reset_codeslot_LOCKNAME_TEMPLATENUM:
    name: "Reset Code Slot"
  override_parent_LOCKNAME_TEMPLATENUM:
    name: "Override PARENTLOCK TEMPLATENUM"
    initial: false

################  automation: #################
automation:
  - alias: keymaster_synchronize_codeslot_LOCKNAME_TEMPLATENUM
    id: keymaster_synchronize_codeslot_LOCKNAME_TEMPLATENUM
    initial_state: true
    mode: single
    max_exceeded: silent
    trigger:
      - platform: state
        entity_id: "binary_sensor.pin_synched_LOCKNAME_TEMPLATENUM"
        from: "on"
        to: "off"
    condition:
      - condition: template
        value_template: >-
          {{ states("sensor.LOCKNAME_code_slot_TEMPLATENUM") != "unavailable" }}
    action:
      - choose:
          # The code should be added to the lock's slot
          - conditions:
              - condition: template
                value_template: "{{ is_state('binary_sensor.active_LOCKNAME_TEMPLATENUM','on') }}"
            sequence:
              - service: keymaster.add_code
                data_template:
                  entity_id: LOCKENTITYNAME
                  code_slot: >-
                    {{ TEMPLATENUM }}
                  usercode: >-
                    {{ states('input_text.LOCKNAME_pin_TEMPLATENUM').strip() }}

          # The code should be removed from the lock's slot
          - conditions:
              - condition: template
                value_template: "{{ is_state('binary_sensor.active_LOCKNAME_TEMPLATENUM','off') }}"
            sequence:
              - service: keymaster.clear_code
                data_template:
                  entity_id: LOCKENTITYNAME
                  code_slot: >-
                    {{ TEMPLATENUM }}

  - alias: keymaster_override_parent_LOCKNAME_TEMPLATENUM_state_change
    id: keymaster_override_parent_LOCKNAME_TEMPLATENUM_state_change
    trigger:
      entity_id: input_boolean.override_parent_LOCKNAME_TEMPLATENUM
      platform: state
      to: "off"
    action:
      - service: script.keymaster_LOCKNAME_copy_from_parent_TEMPLATENUM

  - alias: keymaster_copy_PARENTLOCK_name_LOCKNAME_TEMPLATENUM
    id: keymaster_copy_PARENTLOCK_name_LOCKNAME_TEMPLATENUM
    trigger:
      entity_id: input_text.PARENTLOCK_name_TEMPLATENUM
      platform: state
    condition:
      - condition: state
        entity_id: input_boolean.override_parent_LOCKNAME_TEMPLATENUM
        state: "off"
    action:
      - service: input_text.set_value
        target:
          entity_id: input_text.LOCKNAME_name_TEMPLATENUM
        data:
          value: "{{ states('input_text.PARENTLOCK_name_TEMPLATENUM') }}"

  - alias: keymaster_copy_PARENTLOCK_pin_LOCKNAME_TEMPLATENUM
    id: keymaster_copy_PARENTLOCK_pin_LOCKNAME_TEMPLATENUM
    trigger:
      entity_id: input_text.PARENTLOCK_pin_TEMPLATENUM
      platform: state
    condition:
      - condition: state
        entity_id: input_boolean.override_parent_LOCKNAME_TEMPLATENUM
        state: "off"
    action:
      - service: input_text.set_value
        target:
          entity_id: input_text.LOCKNAME_pin_TEMPLATENUM
        data:
          value: "{{ states('input_text.PARENTLOCK_pin_TEMPLATENUM') }}"

  - alias: keymaster_copy_PARENTLOCK_enabled_LOCKNAME_TEMPLATENUM
    id: keymaster_copy_PARENTLOCK_enabled_LOCKNAME_TEMPLATENUM
    trigger:
      entity_id: input_boolean.enabled_PARENTLOCK_TEMPLATENUM
      platform: state
    condition:
      - condition: state
        entity_id: input_boolean.override_parent_LOCKNAME_TEMPLATENUM
        state: "off"
    action:
      - service_template: >
          {% if (states.input_boolean.enabled_PARENTLOCK_TEMPLATENUM.state == 'on') %}
            input_boolean.turn_on
          {% else %}
            input_boolean.turn_off
          {% endif %}
        entity_id: input_boolean.enabled_LOCKNAME_TEMPLATENUM

  - alias: keymaster_copy_PARENTLOCK_notify_LOCKNAME_TEMPLATENUM
    id: keymaster_copy_PARENTLOCK_notify_LOCKNAME_TEMPLATENUM
    trigger:
      entity_id: input_boolean.notify_PARENTLOCK_TEMPLATENUM
      platform: state
    condition:
      - condition: state
        entity_id: input_boolean.override_parent_LOCKNAME_TEMPLATENUM
        state: "off"
    action:
      - service_template: >
          {% if (states.input_boolean.notify_PARENTLOCK_TEMPLATENUM.state == 'on') %}
            input_boolean.turn_on
          {% else %}
            input_boolean.turn_off
          {% endif %}
        entity_id: input_boolean.notify_LOCKNAME_TEMPLATENUM

  - alias: keymaster_copy_PARENTLOCK_reset_LOCKNAME_TEMPLATENUM
    id: keymaster_copy_PARENTLOCK_reset_LOCKNAME_TEMPLATENUM
    trigger:
      entity_id: input_boolean.reset_codeslot_PARENTLOCK_TEMPLATENUM
      platform: state
    condition:
      - condition: state
        entity_id: input_boolean.override_parent_LOCKNAME_TEMPLATENUM
        state: "off"
    action:
      - service_template: >
          {% if (states.input_boolean.reset_codeslot_PARENTLOCK_TEMPLATENUM.state == 'on') %}
            input_boolean.turn_on
          {% else %}
            input_boolean.turn_off
          {% endif %}
        entity_id: input_boolean.reset_codeslot_PARENTLOCK_TEMPLATENUM

###################  script:  ####################
script:
  keymaster_LOCKNAME_copy_from_parent_TEMPLATENUM:
    sequence:
      - service: automation.trigger
        data: {}
        target:
          entity_id:
            - automation.copy_PARENTLOCK_name_LOCKNAME_TEMPLATENUM
            - automation.copy_PARENTLOCK_pin_LOCKNAME_TEMPLATENUM
            - automation.copy_PARENTLOCK_enabled_LOCKNAME_TEMPLATENUM
            - automation.copy_PARENTLOCK_notify_LOCKNAME_TEMPLATENUM
            - automation.copy_PARENTLOCK_reset_LOCKNAME_TEMPLATENUM

################  binary_sensor: #################
binary_sensor:
  - platform: template
    sensors:
      active_LOCKNAME_TEMPLATENUM:
        friendly_name: "Desired PIN State"
        value_template: >-
          {## This template checks whether the PIN should be considered active based on ##}
          {## all of the different ways the PIN can be conditionally enabled/disabled ##}

          {## Get whether code slot is active  ##}
          {% set is_slot_enabled = is_state('input_boolean.enabled_LOCKNAME_TEMPLATENUM', 'on') %}

          {## Code slot is active if slot is enabled ##}
          {{
            is_slot_enabled
          }}

      pin_synched_LOCKNAME_TEMPLATENUM:
        friendly_name: "PIN synchronized with lock"
        value_template: >
          {% set lockpin = states('sensor.LOCKNAME_code_slot_TEMPLATENUM').strip()  %}
          {% set localpin = states('input_text.LOCKNAME_pin_TEMPLATENUM').strip()  %}
          {% set pin_active = is_state('binary_sensor.active_LOCKNAME_TEMPLATENUM', 'on')  %}
          {% if lockpin == "0000" %}
          {%   set lockpin = "" %}
          {% endif %}
          {% if pin_active %}
            {{ localpin == lockpin }}
          {% else %}
            {{ lockpin == "" }}
          {% endif %}

###################  sensor:  ####################
sensor:
  - platform: template
    sensors:
      connected_LOCKNAME_TEMPLATENUM:
        friendly_name: "PIN Status"
        value_template: >-
          {% set pin_active = is_state('binary_sensor.active_LOCKNAME_TEMPLATENUM', 'on')  %}      
          {% set synched = is_state('binary_sensor.pin_synched_LOCKNAME_TEMPLATENUM', 'on')  %}      
          {% if pin_active %}
            {% if synched %}
              Connected
            {% else %}
              Adding
            {% endif %}
          {% else %}
            {% if synched %}
              Disconnected
            {% else %}
              Deleting
            {% endif %}
          {% endif %}
        icon_template: >
          {% set pin_active = is_state('binary_sensor.active_LOCKNAME_TEMPLATENUM', 'on')  %}      
          {% set synched = is_state('binary_sensor.pin_synched_LOCKNAME_TEMPLATENUM', 'on')  %}      
          {% if pin_active %}
            {% if synched %}
              mdi:folder-key
            {% else %}
              mdi:folder-key-network
            {% endif %}
          {% else %}
            {% if synched %}
              mdi:folder-open
            {% else %}
              mdi:wiper-wash
            {% endif %}
          {% endif %}
